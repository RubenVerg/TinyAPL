name: Build
on:
  push:
    branches: beta
  pull_request:
    branches: beta

jobs:
  ubuntu:
    name: Ubuntu 20.04
    runs-on: ubuntu-20.04

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
      
      - name: Setup GHC
        uses: haskell-actions/setup@v2
        id: setup-haskell
        with:
          ghc-version: '9.10.1'

      - name: Dry run for cache key
        run: 'cabal build exe:tinyapl --dry-run'
      
      - name: Cache
        uses: actions/cache@v4
        env:
          platform: ubuntu
        with:
          path: |
            ${{ steps.setup-haskell.outputs.cabal-store }}
            dist-newstyle
          key: ${{ env.platform }}-${{ hashFiles('dist-newstyle/cache/plan.json') }}
          restore-keys: |
            ${{ env.platform }}-
            
      - name: Build
        run: 'cabal build exe:tinyapl'

      - name: Prepare artifact
        run: 'cp $(cabal list-bin tinyapl | tail -n 1) ./tinyapl'

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: 'tinyapl'
          path: './tinyapl'

  windows:
    name: Windows
    runs-on: windows-2022

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
      
      - name: Setup GHC
        uses: haskell-actions/setup@v2
        id: setup-haskell
        with:
          ghc-version: '9.10.1'

      - name: Hack part 0
        run: 'rm -rf ./dist-newstyle/src'
        shell: bash

      - name: Dry run for cache key
        run: 'cabal build exe:tinyapl --dry-run'
        shell: bash

      - name: Hack part 1
        run: 'rm -rf ./dist-newstyle/src'
        shell: bash
      
      - name: Cache
        uses: actions/cache@v4
        env:
          platform: windows
        with:
          path: |
            ${{ steps.setup-haskell.outputs.cabal-store }}
            dist-newstyle
          key: ${{ env.platform }}-${{ hashFiles('dist-newstyle/cache/plan.json') }}
          restore-keys: |
            ${{ env.platform }}-

      - name: Hack part 2
        run: 'rm -rf ./dist-newstyle/src'
        shell: bash

      - name: Build
        run: 'cabal build exe:tinyapl'
        shell: bash

      - name: Hack part 3
        run: 'rm -rf ./dist-newstyle/src'
        shell: bash

      - name: Prepare artifact
        run: 'cp $(cabal list-bin tinyapl | tail -n 1) ./tinyapl.exe'
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: 'tinyapl.exe'
          path: './tinyapl.exe'

  wasm:
    name: WASM
    runs-on: ubuntu-20.04

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
      
      - name: Setup GHC
        id: setup-haskell
        env:
          FLAVOUR: '9.10'
        run: |
          curl https://gitlab.haskell.org/haskell-wasm/ghc-wasm-meta/-/raw/master/bootstrap.sh | sh
          ~/.ghc-wasm/add_to_github_path.sh

      - name: Dry run for cache key
        run: 'wasm32-wasi-cabal build exe:tinyapl --dry-run'
      
      - name: Cache
        uses: actions/cache@v4
        env:
          platform: wasm
        with:
          path: |
            ~/.ghc-wasm/.cabal/store
            dist-newstyle
          key: ${{ env.platform }}-${{ hashFiles('dist-newstyle/cache/plan.json') }}
          restore-keys: |
            ${{ env.platform }}-
            
      - name: Build
        run: './app/build.sh'

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: 'tinyapl.wasm'
          path: './app/dist/tinyapl.wasm'
